rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        match /{document=**} {
            allow read: if true;
        }

        match /blogs/{blogId} {
            // create blog document only if user is authenticated and user document doesnt have blogId field set
            allow create: if request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && !get(/databases/$(database)/documents/users/$(request.auth.uid)).data.keys().hasAny(['blogId']);
            allow update, delete: if request.auth.uid == request.resource.data.userId;
        }

        match /users/{uid} {
            // create user document only if user is authenticated and user document does not exist
            allow create: if request.auth.uid == uid && !exists(/databases/$(database)/documents/users/$(request.auth.uid));
            allow update, delete: if request.auth.uid == uid;
        }

        match /posts/{postId} {
            // create post document only if user is authenticated and user document has blogId field set
            allow create: if request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).id == request.auth.uid && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.keys().hasAny(['blogId']);
            allow update, delete: if true;

            // comment on post only if user is authenticated and post document exists
            match /comments/{commentId} {
                allow create: if request.auth != null && exists(/databases/$(database)/documents/posts/$(postId));
                allow update, delete: if false;
            }
        }
    }
}
